

//--------------------------------------------------------------------------------------------------
// determines whether the given string contains the specified search value
//--------------------------------------------------------------------------------------------------
@function extjs-str-contains($string, $search) {
    @return str-index(#{$string}, $search) != null;
}


//--------------------------------------------------------------------------------------------------
// Replaces the first occurrence of $search by $replacement in $string
//--------------------------------------------------------------------------------------------------
@function extjs-str-replace($string, $search, $replacement) {
    $result: $string;

    @if extjs-str-contains($string, $search) {
        // replace first occurrence
        $index: str-index($string, $search);
        $before-replace: str-slice($string, 1, $index - 1);
        $after-replace: str-slice($string, $index + str-length($search));
        $result: #{$before-replace}#{$replacement}#{$after-replace};
    }

    @return $result;
}


//--------------------------------------------------------------------------------------------------
// Replaces all occurrences of $search by $replacement in $string
//--------------------------------------------------------------------------------------------------
@function extjs-str-replace-all($string, $search, $replacement) {

    @if str-index($replacement, $search) {
        @error "Inifinite recursion. Replacement '#{$replacement}' contains search string '#{$search}'";
    }

    @if extjs-str-contains($string, $search) {
        // replace first occurrence
        $result: extjs-str-replace($string, $search, $replacement);

        // and continue with potential next recursively
        @return extjs-str-replace-all($result, $search, $replacement);
    }
    @else {
        // break condition of recursion
        @return $string;
    }
}

//--------------------------------------------------------------------------------------------------
// Splits the given string by the specified delimiter and returns a list with all the chunks
//--------------------------------------------------------------------------------------------------
@function extjs-str-split($string, $delimiter, $result: null) {
    // store for results of recursion generated on initial call
    $result: if($result == null, (), $result);

    @if extjs-str-contains($string, $delimiter) {
        $index: str-index($string, $delimiter);
        $chunk: str-slice($string, 1, $index - 1);
        $remainder: str-slice($string, $index + str-length($delimiter));
        $result: append($result, $chunk);
        @return extjs-str-split($remainder, $delimiter, $result);
    }
    @else {
        // break condition for recursion
        @return append($result, $string);
    }
}