// NOTES:
// 'extjs-apply-*' mixins wrap styles into direction aware selector
// 'extjs-write-*' mixins write styles only without wrapping


//--------------------------------------------------------------------------------------------------
// Simply write a single style and its value
//--------------------------------------------------------------------------------------------------
@mixin extjs-write-style($property, $value) {
    #{$property}: $value;
}


//--------------------------------------------------------------------------------------------------
// Writes the border-radius style using the given border-radius info object (low-level)
//--------------------------------------------------------------------------------------------------
@mixin extjs-write-border-radius($radius-info, $value-key, $axis-delimiter) {
    $values: map-get($radius-info, values);
    $x-value: #{map-get(map-get($values, x), $value-key)};
    $y-value: #{map-get(map-get($values, y), $value-key)};

    $value: #{$x-value}#{$axis-delimiter}#{$y-value};

    @if $x-value == $y-value {
        $value: $x-value;
    }

    @each $property in map-get($radius-info, properties) {
        @include extjs-write-style($property, $value);
    }
}


//--------------------------------------------------------------------------------------------------
// Writes the border-radius style from the given radius info object (high-level)
//--------------------------------------------------------------------------------------------------
@mixin extjs-write-border-radius-style($radius-info) {
    @if map-get($radius-info, compact) {
        @include extjs-write-border-radius($radius-info, compact, "/");
    }
    @else {
        $side: map-get($radius-info, side);
        $direction: map-get($radius-info, direction);
        $value-key: #{$side}-#{$direction};
        @include extjs-write-border-radius($radius-info, $value-key, " ");
    }
}


//--------------------------------------------------------------------------------------------------
// Writes a single style in a direction aware fashion
//--------------------------------------------------------------------------------------------------
@mixin extjs-write-bidi-style($property, $value, $direction) {
    $bidi-style: extjs-calculate-bidi-style($property, $value);
    $style: map-get($bidi-style, $direction);

    @include extjs-write-style(map-get($style, property), map-get($style, value));
}


//--------------------------------------------------------------------------------------------------
// Batch processing variant of the extjs-write-bidi-style mixin
//--------------------------------------------------------------------------------------------------
@mixin extjs-write-bidi-styles($styles, $direction) {
    @each $property, $value in $styles {
        @if extjs-is-border-radius-property($property) {
            $bidi-style: extjs-calculate-border-radius-bidi-style($property, $value);
            @include extjs-write-border-radius-style(map-get($bidi-style, $direction));
        }
        @else {
            @include extjs-write-bidi-style($property, $value, $direction);
        }
    }
}


//--------------------------------------------------------------------------------------------------
// Generates wrapping selectors for ltr and rtl styles and write the given styles into the
// selectors. In case the $include-rtl variable is not set or false, then no direction aware
// selectors are generated.
//--------------------------------------------------------------------------------------------------
@mixin extjs-apply($sub-selector, $property, $value) {
    $bidi-style: extjs-calculate-bidi-style($property, $value);

    $ltr: map-get($bidi-style, ltr);
    $rtl: map-get($bidi-style, rtl);

    @if extjs-include-rtl() {
        &:not(.#{$prefix}rtl) #{$sub-selector} {
            @include extjs-write-style(map-get($ltr, property), map-get($ltr, value));
        }

        &.#{$prefix}rtl #{$sub-selector} {
            @include extjs-write-style(map-get($rtl, property), map-get($rtl, value));
        }
    }
    @else {
        @include extjs-write-style(map-get($ltr, property), map-get($ltr, value));
    }
}


//--------------------------------------------------------------------------------------------------
// Generates wrapping selectors for ltr and rtl styles and write the given styles map into the
// selectors. In case the $include-rtl variable is not set or false, then no direction aware
// selectors are generated.
//--------------------------------------------------------------------------------------------------
@mixin extjs-apply-styles($sub-selector, $styles) {
    @if extjs-include-rtl() {
        &:not(.#{$prefix}rtl) #{$sub-selector} {
            @include extjs-write-bidi-styles($styles, ltr);
        }

        &.#{$prefix}rtl #{$sub-selector} {
            @include extjs-write-bidi-styles($styles, rtl);
        }
    }
    @else {
        @include extjs-write-bidi-styles($styles, ltr);
    }
}


//--------------------------------------------------------------------------------------------------
// Generates wrapping selectors and writes border-radius style. This is the single style variant for
// the border-radius style.
//--------------------------------------------------------------------------------------------------
@mixin extjs-apply-border-radius($sub-selector, $property, $value) {
    $bidi-style: extjs-calculate-border-radius-bidi-style($property, $value);

    $ltr: map-get($bidi-style, ltr);
    $rtl: map-get($bidi-style, rtl);

    @if extjs-include-rtl() {
        &:not(.#{$prefix}rtl) #{$sub-selector} {
            @include extjs-write-border-radius-style($ltr);
        }

        &.#{$prefix}rtl #{$sub-selector} {
            @include extjs-write-border-radius-style($rtl);
        }
    }
    @else {
        @include extjs-write-border-radius-style($ltr);
    }
}


//--------------------------------------------------------------------------------------------------
// Wraps the given style into direction aware selectors
//--------------------------------------------------------------------------------------------------
@mixin extjs-apply-style($property, $value, $sub-selector: "") {
    @if extjs-is-border-radius-property($property) {
        @include extjs-apply-border-radius($sub-selector, $property, $value);
    }
    @else {
        @include extjs-apply($sub-selector, $property, $value);
    }
}




//--------------------------------
// Public API
//--------------------------------


//--------------------------------------------------------------------------------------------------
// Bidirectional style mapping mixin (public API)
//--------------------------------------------------------------------------------------------------
@mixin extjs-bidi($styles, $sub-selector: "") {
    @include extjs-apply-styles($sub-selector, $styles);
}


//--------------------------------------------------------------------------------------------------
// padding
//--------------------------------------------------------------------------------------------------
@mixin padding($value, $sub-selector: "") {
    @include extjs-apply-style(padding, $value, $sub-selector);
}

@mixin padding-left($value, $sub-selector: "") {
    @include extjs-apply-style(padding-left, $value, $sub-selector);
}

@mixin padding-right($value, $sub-selector: "") {
    @include extjs-apply-style(padding-right, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// margin
//--------------------------------------------------------------------------------------------------
@mixin margin($value, $sub-selector: "") {
    @include extjs-apply-style(margin, $value, $sub-selector);
}

@mixin margin-left($value, $sub-selector: "") {
    @include extjs-apply-style(margin-left, $value, $sub-selector);
}

@mixin margin-right($value, $sub-selector: "") {
    @include extjs-apply-style(margin-right, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// border-width
//--------------------------------------------------------------------------------------------------
@mixin border-width($value, $sub-selector: "") {
    @include extjs-apply-style(border-width, $value, $sub-selector);
}

@mixin border-left-width($value, $sub-selector: "") {
    @include extjs-apply-style(border-left-width, $value, $sub-selector);
}

@mixin border-right-width($value, $sub-selector: "") {
    @include extjs-apply-style(border-right-width, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// border-style
//--------------------------------------------------------------------------------------------------
@mixin border-style($value, $sub-selector: "") {
    @include extjs-apply-style(border-style, $value, $sub-selector);
}

@mixin border-left-style($value, $sub-selector: "") {
    @include extjs-apply-style(border-left-style, $value, $sub-selector);
}

@mixin border-right-style($value, $sub-selector: "") {
    @include extjs-apply-style(border-right-style, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// border-color
//--------------------------------------------------------------------------------------------------
@mixin border-color($value, $sub-selector: "") {
    @include extjs-apply-style(border-color, $value, $sub-selector);
}

@mixin border-left-color($value, $sub-selector: "") {
    @include extjs-apply-style(border-left-color, $value, $sub-selector);
}

@mixin border-right-color($value, $sub-selector: "") {
    @include extjs-apply-style(border-right-color, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// border (generic)
//--------------------------------------------------------------------------------------------------
@mixin border-left($value, $sub-selector: "") {
    @include extjs-apply-style(border-left, $value, $sub-selector);
}

@mixin border-right($value, $sub-selector: "") {
    @include extjs-apply-style(border-right, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// border-radius
//--------------------------------------------------------------------------------------------------
@mixin border-radius($value, $sub-selector: "") {
    @include extjs-apply-border-radius($sub-selector, border-radius, $value);
}

@mixin border-top-left-radius($value, $sub-selector: "") {
    @include extjs-apply-border-radius($sub-selector, border-top-left-radius, $value);
}

@mixin border-top-right-radius($value, $sub-selector: "") {
    @include extjs-apply-border-radius($sub-selector, border-top-right-radius, $value);
}

@mixin border-bottom-right-radius($value, $sub-selector: "") {
    @include extjs-apply-border-radius($sub-selector, border-bottom-right-radius, $value);
}

@mixin border-bottom-left-radius($value, $sub-selector: "") {
    @include extjs-apply-border-radius($sub-selector, border-bottom-left-radius, $value);
}


//--------------------------------------------------------------------------------------------------
// clear
//--------------------------------------------------------------------------------------------------
@mixin clear($value, $sub-selector: "") {
    @include extjs-apply-style(clear, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// float
//--------------------------------------------------------------------------------------------------
@mixin float($value, $sub-selector: "") {
    @include extjs-apply-style(float, $value, $sub-selector);
}


//--------------------------------------------------------------------------------------------------
// text-align
//--------------------------------------------------------------------------------------------------
@mixin text-align($value, $sub-selector: "") {
    @include extjs-apply-style(text-align, $value, $sub-selector);
}